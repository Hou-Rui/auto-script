#!/usr/bin/env bash

set -u

declare -A SRC=([native]=u [flatpak]=u [zsh]=u [vim]=u)
declare F_REGEX=n F_NO_CONFIRM=n F_REMOTE=n AUR_HELPER SUDO
readonly TITLE_SIZE=80

function my_grep {
  grep -Ei -- "$*"
}

function title_echo {
  local contents="$*"
  local size=${#contents} size1 size2
  (( size1 = (TITLE_SIZE - size) / 2 ))
  (( size2 = (TITLE_SIZE - size) % 2 == 0 ? size1 : size1 + 1 ))
  tput bold
  for _ in $(seq $size1); do
    echo -n '⎼'
  done
  echo -n " $contents "
  for _ in $(seq $size2); do
    echo -n '⎼'
  done
  echo
  tput sgr0
}

function subtitle_echo {
  local contents="$*"
  tput bold
  tput setaf 4
  echo -n ':: '
  tput setaf 15
  echo "$contents"
  tput sgr0
}

function bold_echo {
  local contents="$*"
  tput bold
  echo "$*"
  tput sgr0
}

function src_set_all {
  local k
  for k in "${!SRC[@]}"; do
    [[ ${SRC[$k]} == u ]] && SRC["$k"]="$1"
  done
}

function src_set {
  [[ ${SRC[$*]} == y ]]
}

function src_none_set {
  local v
  for v in "${SRC[@]}"; do
    [[ $v != u ]] && return 1
  done
  return 0
}

function src_exclusive {
  local k v found_key=''
  for k in "${!SRC[@]}"; do
    v="${SRC[$k]}"
    [[ $v == u ]] && continue
    if [[ -n $found_key ]]; then
      exit_msg "--$found_key and --$k cannot be set at the same time."
    fi
    found_key="$k"
  done
}

function src_default {
  local k
  src_none_set || return
  for k in "$@"; do
    SRC["$k"]=y
  done
}

function src_default_all {
  src_none_set && src_set_all y
}

function find_aur_helper {
  local helper aur_helpers=(yay paru pacman)
  for helper in "${aur_helpers[@]}"; do
    command -v "$helper" &> /dev/null || continue
    AUR_HELPER="$helper"
    return
  done
  exit_msg 'No Pacman / AUR helper found!'
}

function find_sudo {
  local util utils=(sudo doas)
  for util in "${utils[@]}"; do
    command -v "$util" &> /dev/null || continue
    SUDO="$util"
    return
  done
  exit_msg 'No sudo utility found!'
}

function exit_msg {
  echo "Error: $*"
  exit 1
}

function exit_usage {
  echo 'Usage: auto <command> [options] [packages]'
  echo
  echo 'Available commands:'
  echo '  install:    install package(s) (default to native)'
  echo '  remove:     remove package(s) (default to native)'
  echo '  search:     search package(s) in remote repositories (default to native and flatpak)'
  echo '  update:     update package(s) (default to native, flatpak, zsh, vim)'
  echo '  autoremove: remove unused packages (default to native and flatpak)'
  echo '  clean:      clean cache and unused packages (default to native and flatpak)'
  echo '  info:       display info for a package (default to native)'
  echo '  which:      query which package owns an executable (default to native)'
  echo '  list:       list installed packages (default to native and flatpak)'
  echo '  help:       display this message'
  echo
  echo 'Available options:'
  echo '  -n, --native:     apply operation on native packages'
  echo '  -f, --flatpak:    apply operation on flatpak packages'
  echo '  -v, --vim:        apply operation on vim packages'
  echo '  -z, --zsh:        apply operation on zsh packages'
  echo '  -y, --noconfirm:  skip all confirmation'
  echo '  -r, --regex:      (only for search) use regular expression in searching terms'
  echo '  -w, --remote:     (only for info and which) display or query remote info'
  echo '  -e <src>,'
  echo '  --exclude <src>:  exclude source when performing operation'
  exit "${1:-1}"
}

function exit_no_package_names {
  exit_msg 'Package name(s) missing.'
}

function exit_src_not_applicable {
  exit_msg 'Flag(s) not applicable for this action.'
}

function subcmd_install {
  src_exclusive
  src_default native
  local pkgs
  read -ra pkgs <<< "$*"
  [[ -z ${pkgs[*]} ]] && exit_no_package_names
  if src_set native; then
    title_echo "Installing native package ${pkgs[*]}..."
    if [[ $F_NO_CONFIRM == n ]]; then
      $AUR_HELPER -S "${pkgs[@]}"
    else
      $AUR_HELPER -Syy "${pkgs[@]}"
    fi
  elif src_set flatpak; then
    title_echo "Installing Flatpak package ${pkgs[*]}..."
    if [[ $F_NO_CONFIRM == n ]]; then
      flatpak install "${pkgs[@]}"
    else
      flatpak install --assumeyes "${pkgs[@]}"
    fi
  else
    exit_src_not_applicable
  fi
}

function subcmd_search {
  src_default native flatpak
  local pkgs
  read -ra pkgs <<< "$*"
  if src_set native; then
    title_echo "Searching native package ${pkgs[*]}..."
    $AUR_HELPER -Ss "${pkgs[@]}"
    SRC[native]=u
  fi
  if src_set flatpak; then
    title_echo "Searching Flatpak package ${pkgs[*]}..."
    flatpak search "${pkgs[@]}"
    SRC[flatpak]=u
  fi
  src_none_set || exit_src_not_applicable
}

function update_flatpak_pkgs {
  if [[ $F_NO_CONFIRM == n ]]; then
    flatpak update
  else
    flatpak update --assumeyes
  fi
}

function update_native_pkgs {
  if [[ $F_NO_CONFIRM == n ]]; then
    $AUR_HELPER -Syu --devel
  else
    $AUR_HELPER -Syu --devel --noconfirm
  fi
  $SUDO pkgfile -u
}

function update_custom_zsh_plugins {
  local dir plugin ZSH="$HOME/.oh-my-zsh"
  subtitle_echo "Updating Oh-My-Zsh..."
  zsh -c "$ZSH/tools/upgrade.sh"
  for dir in "$ZSH/custom/plugins"/* "$ZSH/custom/themes"/*; do
    [[ -e $dir/.git ]] || continue
    plugin="$(basename "$dir")"
    subtitle_echo "Updating plugin $plugin..."
    (cd "$dir" || return; git pull) &
  done
  wait
}

function update_vim_plugins {
  nvim -c 'PlugUpgrade | PlugUpdate | UpdateRemotePlugins | qa'
  nvim -c 'TSUpdate | qa'
  echo 'Done.'
}

function subcmd_update {
  src_default_all
  if src_set native; then
    title_echo 'Updating native packages...'
    update_native_pkgs
  fi
  if src_set flatpak; then
    title_echo 'Updating Flatpak packages...'
    update_flatpak_pkgs
  fi
  if src_set zsh; then
    title_echo 'Updating ZSH plugins...'
    update_custom_zsh_plugins
  fi
  if src_set vim; then
    title_echo 'Updating NeoVim plugins...'
    update_vim_plugins
  fi
}

function subcmd_remove {
  src_exclusive
  src_default native
  local pkgs
  read -ra pkgs <<< "$*"
  if [[ -z ${pkgs[*]} ]]; then
    src_set_all u
    subcmd_autoremove
    return
  fi
  if src_set native; then
    title_echo "Removing native package ${pkgs[*]}..."
    case $F_REGEX in
      (n) $AUR_HELPER -Rscn "${pkgs[@]}";;
      (*) $AUR_HELPER -Qnq | my_grep "${pkgs[*]}" | $AUR_HELPER -Rscn -;;
    esac
  elif src_set flatpak; then
    title_echo "Removing Flatpak package ${pkgs[*]}..."
    flatpak uninstall --delete-data "${pkgs[@]}"
  else
    exit_src_not_applicable
  fi
}

function subcmd_autoremove {
  src_default native flatpak
  if src_set native; then
    title_echo 'Autoremoving native packages...'
    $AUR_HELPER -Yc
    SRC[native]=u
  fi
  if src_set flatpak; then
    title_echo 'Autoremoving Flatpak packages...'
    flatpak uninstall --unused --delete-data
    SRC[flatpak]=u
  fi
  src_none_set || exit_src_not_applicable
}

function subcmd_clean {
  src_none_set || exit_src_not_applicable
  F_NO_CONFIRM=y
  title_echo 'Performing autoremove...'
  subcmd_autoremove
  title_echo 'Cleaning cache...'
  yes | $AUR_HELPER -Sccd
  echo
}

function subcmd_which {
  src_none_set || exit_src_not_applicable
  (( $# > 0 )) || exit_usage 1
  local pkg pkgs exec remote
  read -ra pkgs <<< "$*"
  for pkg in "${pkgs[@]}"; do
    if [[ $F_REMOTE == n ]]; then
      exec="$(which "$pkg" 2> /dev/null)" \
        || exit_msg "$pkg not found."
      $AUR_HELPER -Qo "$exec"
    else
      remote="$(pkgfile -s "$pkg")" \
        || exit_msg "$pkg not found."
      echo -n "$pkg can be found in "
      bold_echo "$remote"
    fi
  done
}

function find_flatpak_ref {
  local ref="$*" matched
  mapfile -t matched \
    <<< "$(flatpak list --columns=app | sed '1d' | my_grep "$ref")"
  case ${#matched[@]} in
    (0) return;;
    (1) echo "${matched[*]}";;
    (*) printf '%s\n' "${matched[@]}" \
      | fzf --header="Multiple packages matched! Please select:";;
  esac
}

function subcmd_info {
  src_exclusive
  src_default native
  (( $# > 0 )) || exit_usage 1
  local pkgs selected origin
  read -ra pkgs <<< "$*"
  if src_set flatpak; then
    subtitle_echo "Querying information on flatpak package ${pkgs[*]}..."
    selected="$(find_flatpak_ref "${pkgs[*]}")"
    case "$F_REMOTE" in
      (n) flatpak info "$selected";;
      (*) origin="$(flatpak info -o "$selected")"
          flatpak remote-info "$origin" "$selected" --log;;
    esac
  elif src_set native; then
    subtitle_echo "Querying information on native package ${pkgs[*]}..."
    case "$F_REMOTE" in
      (n) $AUR_HELPER -Qi "${pkgs[@]}";;
      (*) $AUR_HELPER -Si "${pkgs[@]}";;
    esac
  else
    exit_src_not_applicable
  fi
}

function subcmd_list {
  src_default native flatpak
  local pkgs
  read -ra pkgs <<< "$*"
  if src_set native; then
    case ${#pkgs[@]} in
      (0) $AUR_HELPER -Q;;
      (*) $AUR_HELPER -Q | my_grep "${pkgs[*]}";;
    esac
    SRC[native]=u
  fi
  if src_set flatpak; then
    case ${#pkgs[@]} in
      (0) flatpak list;;
      (*) flatpak list | my_grep "${pkgs[*]}";;
    esac
    SRC[flatpak]=u
  fi
  src_none_set || exit_src_not_applicable
}

function subcmd_help {
  exit_usage 0
}

function main {
  (( $# >= 1 )) || exit_usage
  find_sudo
  find_aur_helper
  local opts subcmd="$1"
  shift
  opts=$(getopt -o fnzvrywe \
    -l flatpak,native,zsh,vim,regex,noconfirm,remote,exclude: \
    -- "$@") || exit_usage
  eval set -- "$opts"
  while true; do
    case "$1" in
      (-n | --native)     SRC[native]=y;;
      (-f | --flatpak)    SRC[flatpak]=y;;
      (-z | --zsh)        SRC[zsh]=y;;
      (-v | --vim)        SRC[vim]=y;;
      (-r | --regex)      F_REGEX=y;;
      (-y | --noconfirm)  F_NO_CONFIRM=y;;
      (-w | --remote)     F_REMOTE=y;;
      (-e | --exclude)    shift; SRC["$1"]=n;;
      (--)                shift; break;;
    esac
    shift
  done
  command -v "subcmd_$subcmd" &> /dev/null \
    || exit_msg "Unknown sub command: $subcmd"
  "subcmd_$subcmd" "$@"
}

main "$@"

