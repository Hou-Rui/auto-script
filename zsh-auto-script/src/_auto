#compdef auto

local line state subcmd
_arguments -C "1: :->cmds" "*::arg:->args"
case "$state" in
  (cmds)
    _values 'auto command' \
            'install[install package(s) (default to native)]' \
            'remove[remove package(s) (default to native)]' \
            'search[search package(s) in remote repositories (default to native and flatpak)]' \
            'update[update package(s) (default to native, flatpak, zsh, vim)]' \
            'clean[clean cache and unused packages (default to native and flatpak)]' \
            'info[display info for a package (default to native)]' \
            'files[list installed files for a package (default to native)]' \
            'which[query which package owns an executable (default to native)]' \
            'list[list installed packages (default to native and flatpak)]' \
            'help[display this message]' ;;
  (args)
    subcmd="$line[1]"
    (( $+functions[_auto_$subcmd] )) && _auto_$subcmd;;
esac

_auto_remote_packages() {
  IFS=$'\n' local pkgs=($(python -c '
import pyalpm
from sys import argv
from pathlib import Path
handle = pyalpm.Handle("/", "/var/lib/pacman")
db_paths = Path("/var/lib/pacman/sync/").glob("*.db")
for path in db_paths:
  handle.register_syncdb(path.stem, pyalpm.SIG_DATABASE_OPTIONAL)
for db in handle.get_syncdbs():
  for pkg in db.search(f"{argv[1]}.*"):
    print(f"{pkg.name}:{pkg.desc}")
  ' "$PREFIX"))
  _describe "packages" pkgs
}

_auto_local_packages() {
  IFS=$'\n' local pkgs=($(python -c '
from pyalpm import Handle
db = Handle("/", "/var/lib/pacman").get_localdb()
for pkg in db.pkgcache:
  print(f"{pkg.name}:{pkg.desc}")'))
  _describe "packages" pkgs
}

_auto_install() { _auto_remote_packages }

_auto_update() { _auto_local_packages }

_auto_search() { _auto_remote_packages }

_auto_remove() { _auto_local_packages }

_auto_clean() { }

_auto_which() { _path_commands }

_auto_info() { _auto_local_packages }

_auto_files() { _auto_local_packages }

